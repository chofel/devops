All command with example:
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#create



kubectl run my-nginx --image=nginx --replicas=2 --port=80
kubectl run webserver --image=nginx:alpine

Pod:

List all pods 
#kubectl get pods
List pods for all namespace
# kubectl get pods --all-namespaces
List all critical pods 
#kubectl get -n kube-system pods -a
List pods with more info 
#kubectl get pod -o wide, kubectl get pod/<pod-name> -o yaml
Get pod info 
#kubectl describe pod/srv-mysql-server
List all pods with labels 
#kubectl get pods --show-labels
List all unhealthy pods 
#kubectl get pods –field-selector=status.phase!=Running –all-namespaces
List running pods 
#kubectl get pods –field-selector=status.phase=Running
Get Pod initContainer status 
#kubectl get pod --template ’{{.status.initContainerStatuses}}’ <pod-name>
kubectl run command 
#kubectl exec -it -n "$ns" "$podname" – sh -c "echo $msg »/dev/err.log"
Watch pods 
#kubectl get pods -n wordpress --watch
Get pod by selector 
#kubectl get pods –selector="app=syslog" -o jsonpath=’{.items[*].metadata.name}’
List pods and images 
#kubectl get pods -o=’custom-columns=PODS:.metadata.name,Images:.spec.containers[*].image’
List pods and containers
# kubectl get pods -o=’custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name’


Check your pods’ IPs:

# kubectl get pods -l run=my-nginx -o yaml | grep podIP

show status:

#kubectl get deploy deploymentname -o yaml --export

enter into a pod from kub cli:
kubectl exec -it <podname> -- /bin/bash


kubectl run webserver --image=nginx:alpine
kubectl get pods
kubectl delete pod webserver-67bd7c7fc7-scs6j
kubectl get services
minikube service webserver --url
kubectl expose deployment webserver --type=LoadBalancer --port=80
kubectl get pvc
minikube service wordpress --url


How to enter a running pods
kubectl exec -it shell-demo -- /bin/bash

Opening a shell when a Pod has more than one Container
#kubectl exec -it my-pod --container main-app -- /bin/bash
#kubectl apply -k ./
#kubectl delete -k ./






Run images:


Run curl test temporarily kubectl run --generator=run-pod/v1 --rm mytest --image=yauritux/busybox-curl 
Run wget test temporarily kubectl run --generator=run-pod/v1 --rm mytest --image=busybox -it wget
Run nginx deployment with 2 replicas
# kubectl run my-nginx --image=nginx --replicas=2 --port=80
Run nginx pod and expose it 
#kubectl run my-nginx --restart=Never --image=nginx --port=80 --expose
Run nginx deployment and expose it 
#kubectl run my-nginx --image=nginx --port=80 --expose
List authenticated contexts 
#kubectl config get-contexts, ~/.kube/config
Set namespace preference 
#kubectl config set-context <context_name> --namespace=<ns_name>
List pods with nodes info 
#kubectl get pod -o wide
List everything 
#kubectl get all --all-namespaces
Get all services 
#kubectl get service --all-namespaces
Get all deployments 
#kubectl get deployments --all-namespaces
Show nodes with labels 
#kubectl get nodes --show-labels
Get resources with json output 
#kubectl get pods --all-namespaces -o json
Validate yaml file with dry run 
#kubectl create --dry-run --validate -f pod-dummy.yaml
Start a temporary pod for testing 
#kubectl run --rm -i -t --image=alpine test-$RANDOM -- sh
kubectl run shell command 
#kubectl exec -it mytest -- ls -l /etc/hosts
Get system conf via configmap 
#kubectl -n kube-system get cm kubeadm-config -o yaml
Get deployment yaml 
#kubectl -n denny-websites get deployment mysql -o yaml
Explain resource kubectl explain pods, kubectl explain svc
Watch pods 
#kubectl get pods -n wordpress --watch

Open a bash terminal in a pod 
#kubectl exec -it storage sh
Check pod environment variables 
#kubectl exec redis env


Enable kubectl shell autocompletion echo "source <(kubectl completion bash)" »~/.bashrc, and reload



kubectl edit service my-nginx1

Check Performance:

Get node resource usage 
#kubectl top node
Get pod resource usage 
#kubectl top pod
Get resource usage for a given pod k
#ubectl top <podname> --containers
List resource utilization for all containers 
#kubectl top pod --all-namespaces --containers=true



Resources Deletion:


Delete pod 
#kubectl delete pod/<pod-name> -n <my-namespace>
Delete pod by force 
#kubectl delete pod/<pod-name> --grace-period=0 --force
Delete pods by labels 
#kubectl delete pod -l env=test
Delete deployments by labels 
#kubectl delete deployment -l app=wordpress
Delete all resources filtered by labels 
#kubectl delete pods,services -l name=myLabel
Delete resources under a namespace 
#kubectl -n my-ns delete po,svc --all
Delete persist volumes by labels 
#kubectl delete pvc -l app=wordpress
Delete state fulset only (not pods) 
#kubectl delete sts/<stateful_set_name> --cascade=false


Log & Conf Files

Config folder --> /etc/kubernetes/
Certificate files --->  /etc/kubernetes/pki/
Credentials to API server ---->/etc/kubernetes/kubelet.conf
Superuser credentials ----> /etc/kubernetes/admin.conf
kubectl config file---> ~/.kube/config
Kubernets working dir---> /var/lib/kubelet/
Docker working dir --->/var/lib/docker/, /var/log/containers/
Etcd working dir ----> /var/lib/etcd/
Network cni ---> /etc/cni/net.d/
Log files ---> /var/log/pods/
log in worker node ---> /var/log/kubelet.log, /var/log/kube-proxy.log
log in master node ----> kube-apiserver.log, kube-scheduler.log, kube-controller-manager.log
Env ---> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
Env ---> export KUBECONFIG=/etc/kubernetes/admin.conf






Running Docker Compose
#docker-compose up -d

To verify that the container is active, you can run:
#docker-compose ps

Other command
#docker-compose logs
#docker-compose pause
#docker-compose unpause
#docker-compose stop
#docker-compose down 

Run application using docker-compose.
Run a ngin-web app using docker-compose
Run example-voting-app-master.


=========================History++++++++++
  651  ls -la
  652  vi kustomization.yaml
  653  vi mysql-deployment.yaml
  654  kubectl apply -k ./
  655  ls -la
  656  kubectl delete -k ./
  657  rm mysql-deployment.yaml
  658  rm wordpress-deployment.yaml
  659  ls -la
  660  curl -LO https://k8s.io/examples/application/wordpress/mysql-deployment.yaml
  661  curl -LO https://k8s.io/examples/application/wordpress/wordpress-deployment.yaml
  662  ls -la
  663  vi mysql-deployment.yaml
  664  vi wordpress-deployment.yaml
  665  kubectl apply -k ./
  666  vi mysql-deployment.yaml
  667  kubectl vertion
  668  kubectl version
  669  vi mysql-deployment.yaml
  670  cd ../nginx-deployment/
  671  ls -la
  672  vi web-service.yaml
  673  cd -
  674  ls -la
  675  kubectl get pvc
  676  vi mysql-deployment.yaml
  677  kubectl apply -f wordpress-deployment.yaml
  678  kubectl get pvc
  679  kubectl get svc
  680  vi wordpress-deployment.yaml
  681  kubectl apply -f mysql-deployment.yaml
  682  kubectl get pods
  683  kubectl get deploy
  684  kubectl delete -f mysql-deployment.yaml
  685  kubectl delete -f wordpress-deployment.yaml
  686  kubectl delete -f kustomization.yaml
  687  kubectl get secrets
  688  kubectl delete -k ./
  689  kubectl get secrets
  690  kubectl apply -f kustomization.yaml
  691  vi kustomization.yaml
  692  rm kustomization.yaml
  693  ls -la
  694  cat <<EOF >./kustomization.yaml
secretGenerator:
- name: mysql-pass
  literals:
  - password=YOUR_PASSWORD
EOF

  695  cat kustomization.yaml
  696  cat <<EOF >>./kustomization.yaml
resources:
  - mysql-deployment.yaml
  - wordpress-deployment.yaml
EOF

  697  cat kustomization.yaml
  698  ls -la
  699  kubectl apply -k ./
  700  kubectl get pods
  701  kubectl get secrets
  702  kubectl get pvc
  703  kubectl get services wordpress
  704  minikube service wordpress --url
  705  kubectl get services wordpress
  706  kubectl delete -k ./
  707  history



  
  =========================
  https://kubernetes.io/docs/tutorials/stateless-application/guestbook/





